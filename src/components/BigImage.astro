---
import { Picture } from '@astrojs/image/components'
import codeImage from '../images/code.png'
---

<section class='image-section mt-[160px] aspect-[16/9] rounded-lg'>
  <div class="image-container w-full h-full rounded-lg" data-play="false">
    <div class='bg-gradient relative' data-play="false"></div>
    <div id='zoom-root' class='zoomies-container'></div>
    <div data-play="false" class="size-auto image-animation z-10 opacity-0 overflow-hidden rounded-lg absolute inset-[1px]">
      <Picture src={codeImage} aspectRatio="16:9" widths={[200, 400, 800, 1200]} sizes="100%" formats={['avif', 'jpeg', 'png', 'webp']} alt="Visual Studio Code" />
    </div>
  </div>
</section>

<script>
  const options = {
    rootMargin: '0px',
    threshold: 1.0,
  }
  const imageObserver = new IntersectionObserver((entries, observer) => {
    console.log('image Observer callback')
    if(entries[0].isIntersecting) {
      const elements = document.querySelectorAll('[data-play]')
      elements.forEach(el => {
        // @ts-ignore
        el.dataset.play = true
      })
      observer.disconnect()
    }

  }, options) 

  imageObserver.observe(document.querySelector('.image-container'))
  
  
  startZoom('horizontal');
  startZoom('vertical');

  function addZoomie(zoomId, direction, speed) {
    const container = document.getElementById('zoom-root');
    const el = document.createElement('div');
    el.classList.add('zoom');
    el.id = zoomId;

    const distance = `${getRandom(65, 85)}%`

    el.style.setProperty('--zoom-speed', `${speed}ms`);
    el.style.setProperty('--zoom-distance', distance);

    // height: 1px;
    // width: var(--zoom-length);
    if (direction == 'horizontal') {
      el.style.setProperty('--zoom-gradient-direction', 'to left');
      el.style.setProperty('--zoom-animation', 'zoom-horizontal');
      el.style.width = 'var(--zoom-length)';
      el.style.height = '1px';
    } else {
      el.style.setProperty('--zoom-gradient-direction', 'to top');
      el.style.setProperty('--zoom-animation', 'zoom-vertical');
      el.style.width = '1px';
      el.style.height = 'var(--zoom-length)';
      el.style.right = '0';
    }

    container.appendChild(el);
  }

  function startZoom(direction) {
    // this sucks, probably gsap or something would probably make this easier

    const zoomId = Date.now().toString();
    const interval = getRandom(1000, 4000);
    const speed = getRandom(1000, 4000);
    setTimeout(() => {
      addZoomie(zoomId, direction, speed);
      startZoom(direction);
    }, interval);

    setTimeout(() => document.getElementById(zoomId).remove(), speed * 2);
  }

  function getRandom(min, max) {
    return Math.random() * (max - min) + min;
  }
</script>

<style is:global>
  * [data-play="false"] {
    animation-play-state: paused !important;
  }
  
  .image-animation {
    animation: in 300ms linear forwards;
    animation-delay: calc(var(--base-delay) + 500ms);
  }
  
  .image-section {
    --base-delay: 500ms;
    perspective: 2000px;
  }

  .image-container {
    position: relative;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 1fr;

    transform: rotateX(30deg);
    perspective: 2px;

    animation: picture-in ease-in-out 1000ms forwards;
    animation-delay: var(--base-delay);
  }

  .image-container > *:not(.size-auto) {
    grid-area: 1 / 1 / 1 / 1;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  /* I can tweak this all day and it still won't look as good just leave it! */

  .bg-gradient {
    background: conic-gradient(
      from 30deg,
      hsl(242, 70%, 43%) 55deg,
      hsl(264, 70%, 42%) 95deg,
      hsl(217, 51%, 33%) 130deg,
      hsl(215, 20%, 31%) 190deg,
      hsl(224, 59%, 18%) 230deg,
      hsl(279, 68%, 31%) 290deg,
      hsl(202, 57%, 39%)
    );
    filter: blur(180px);
    opacity: 0;
    transform: scale(1);
    animation: gradient-in ease-out 4000ms forwards;
    animation-delay: var(--base-delay);
  }

  .zoomies-container {
    position: relative;
    background-color: rgba(255, 255, 255, 0.02);
    background-image: radial-gradient(ellipse 50% 75% at 25% 40%, rgb(90 29 229 / 20%), transparent),
      radial-gradient(ellipse 50% 75% at 75% 50%, rgb(15 69 157 / 12%), transparent);
    border-radius: inherit;
  }

  .zoomies-container::before {
    content: '';
    pointer-events: none;
    user-select: none;
    position: absolute;
    border-radius: inherit;
    inset: -1px;
    padding: 1px;
    background: linear-gradient(to bottom, hsl(242, 59%, 55%), transparent);
    mask: linear-gradient(black, black) content-box content-box, linear-gradient(black, black);
    mask-composite: exclude;
  }

  .zoom {
    --zoom-length: 100px;
    --zoom-gradient-color: rgba(255, 255, 255, 0.5);

    --zoom-gradient-direction: to left;
    --zoom-animation: 'zoom-horizontal'
    --zoom-distance: 75%;
    --zoom-speed: 3s;

    position: absolute;
    top: 0;
    background-image: linear-gradient(
      var(--zoom-gradient-direction),
      var(--zoom-gradient-color),
      transparent
    );

    animation: var(--zoom-animation) var(--zoom-speed) forwards;
  }

  @keyframes zoom-horizontal {
    0% {
      left: 0%;
      opacity: 0;
    }
    20% {
      opacity: 1;
    }
    100% {
      opacity: 0;
      left: var(--zoom-distance);
    }
  }

  @keyframes zoom-vertical {
    0% {
      top: 0%;
      opacity: 0;
    }
    20% {
      opacity: 1;
    }
    100% {
      opacity: 0;
      top: var(--zoom-distance);
    }
  }

  @keyframes picture-in {
    0% {
      transform: scale(1) rotateX(30deg);
    }
    50% {
      transform: scale(.8) rotateX(30deg);
    }
    70% {
      transform: scale(1) rotateX(0deg);
    }
    100% {
      transform: scale(1) rotateX(0deg);
    }
  }

  @keyframes gradient-in {
    0% {
      opacity: 0;
      transform: scale(1);
    }
    30% {
      opacity: 1;
      transform: scale(1.2);
    }
    100% {
      opacity: 0.2;
      transform: scale(1);
    }
  }

  @keyframes in {
    from {
      opacity: 0;
    } 
    to {
      opacity: 1;
    }
  }
</style>